definitions:
  models.Book:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      price:
        type: number
      release_year:
        type: integer
      thickness:
        type: string
      title:
        type: string
      total_page:
        type: integer
    type: object
  models.BookRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      price:
        type: number
      release_year:
        maximum: 2024
        minimum: 1980
        type: integer
      title:
        type: string
      total_page:
        type: integer
    required:
    - category_id
    - title
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  models.CategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
info:
  contact: {}
  description: REST API for managing books and categories
  title: Book Library API
  version: "1.0"
paths:
  /api/books:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      security:
      - BearerAuth: []
      summary: Get All Books
      tags:
      - Books
    post:
      consumes:
      - application/json
      parameters:
      - description: Book data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Book
      tags:
      - Books
  /api/books/{id}:
    delete:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Book
      tags:
      - Books
    get:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Book Detail
      tags:
      - Books
  /api/categories:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      security:
      - BearerAuth: []
      summary: Get All Categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      parameters:
      - description: Category data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Category
      tags:
      - Categories
  /api/categories/{id}:
    delete:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete Category
      tags:
      - Categories
    get:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      security:
      - BearerAuth: []
      summary: Get Category Detail
      tags:
      - Categories
  /api/categories/{id}/books:
    get:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      security:
      - BearerAuth: []
      summary: Get Books by Category ID
      tags:
      - Categories
  /api/users/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login User
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: 'Masukkan token JWT dengan format: Bearer <token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
